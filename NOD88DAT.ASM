	PAGE	45,132

	TITLE Noddy88 debugger

	SUBTTL Noddy88 external data area

COMMENT	%

	This file contains the tables for decoding and displaying
	instructions.

%

	.SALL

	EXTRN	DECODE_01:NEAR
	EXTRN	DECODE_02:NEAR
	EXTRN	DECODE_03:NEAR
	EXTRN	DECODE_04:NEAR
	EXTRN	DECODE_05:NEAR
	EXTRN	DECODE_06:NEAR
	EXTRN	DECODE_07:NEAR
	EXTRN	DECODE_08:NEAR
	EXTRN	DECODE_09:NEAR
	EXTRN	DECODE_10:NEAR
	EXTRN	DECODE_11:NEAR
	EXTRN	DECODE_12:NEAR
	EXTRN	DECODE_13:NEAR
	EXTRN	DECODE_14:NEAR
	EXTRN	DECODE_15:NEAR
	EXTRN	DECODE_16:NEAR
	EXTRN	DECODE_17:NEAR
	EXTRN	DECODE_18:NEAR
	EXTRN	DECODE_19:NEAR
	EXTRN	DECODE_20:NEAR
	EXTRN	DECODE_21:NEAR
	EXTRN	DECODE_22:NEAR
	EXTRN	DECODE_23:NEAR
	EXTRN	DECODE_24:NEAR
	EXTRN	DECODE_25:NEAR
	EXTRN	DECODE_26:NEAR
	EXTRN	DECODE_27:NEAR
	EXTRN	DECODE_28:NEAR
	EXTRN	DECODE_29:NEAR
	EXTRN	DECODE_30:NEAR
	EXTRN	DECODE_31:NEAR


	EXTRN	RM000$MOD00:NEAR
	EXTRN	RM001$MOD00:NEAR
	EXTRN	RM010$MOD00:NEAR
	EXTRN	RM011$MOD00:NEAR
	EXTRN	RM100$MOD00:NEAR
	EXTRN	RM101$MOD00:NEAR
	EXTRN	RM110$MOD00:NEAR
	EXTRN	RM111$MOD00:NEAR

	EXTRN	RM000$MOD01:NEAR
	EXTRN	RM001$MOD01:NEAR
	EXTRN	RM010$MOD01:NEAR
	EXTRN	RM011$MOD01:NEAR
	EXTRN	RM100$MOD01:NEAR
	EXTRN	RM101$MOD01:NEAR
	EXTRN	RM110$MOD01:NEAR
	EXTRN	RM111$MOD01:NEAR

	EXTRN	RM000$MOD10:NEAR
	EXTRN	RM001$MOD10:NEAR
	EXTRN	RM010$MOD10:NEAR
	EXTRN	RM011$MOD10:NEAR
	EXTRN	RM100$MOD10:NEAR
	EXTRN	RM101$MOD10:NEAR
	EXTRN	RM110$MOD10:NEAR
	EXTRN	RM111$MOD10:NEAR

	EXTRN	RM$MOD11:NEAR

	PAGE

	PUBLIC	SINGLE_REGISTERS
	PUBLIC	REGISTER_PAIRS
	PUBLIC	SEG_REGISTERS

	PUBLIC	MNEMONICS_TABLE
	PUBLIC	ROUTINE_TABLE

	PUBLIC	M_NON

	PUBLIC	MOD_TABLE

	PUBLIC	OPCODES_8081
	PUBLIC	OPCODES_8283
	PUBLIC	OPCODES_C6C7
	PUBLIC	OPCODES_D0D3
	PUBLIC	OPCODES_F6F7
	PUBLIC	OPCODES_FE
	PUBLIC	OPCODES_FF



	SUBTTL

	PAGE

	SUBTTL Table building macros defined here

R_TABLE			MACRO	Y
	IRP	X,Y			;; save space for parameters
		DB	'&X'
	ENDM
ENDM

M_TABLE		MACRO
;; Mnemonics tables

;; Start with opcodes affecting flags directly

X M_CMC,<<CMC     >>
X M_CLC,<<CLC     >>
X M_STC,<<STC     >>
X M_CLI,<<CLI     >>
X M_STI,<<STI     >>
X M_CLD,<<CLD     >>
X M_STD,<<STD     >>

;; Single byte mnemonics

X M_AAA,<<AAA     >>
X M_AAS,<<AAS     >>
X M_CBW,<<CBW     >>
X M_CWD,<<CWD     >>
X M_DAA,<<DAA     >>
X M_DAS,<<DAS     >>
X M_HLT,<<HLT     >>
X M_LAHF,<<LAHF    >>
X M_LOCK,<<LOCK    >>
X M_NOP,<<NOP     >>
X M_PUSHF,<<PUSHF   >>
X M_POPF,<<POPF    >>
X M_SAHF,<<SAHF    >>
X M_WAIT,<<WAIT    >>
X M_XLAT,<<XLAT    >>

;; Mnemonics which require an operand

X M_CMPSB,<<CMPSB   >>
X M_CMPSW,<<CMPSW   >>
X M_LODSB,<<LODSB   >>
X M_LODSW,<<LODSW   >>
X M_MOVSB,<<MOVSB   >>
X M_MOVSW,<<MOVSW   >>
X M_REP,<<REP     >>
X M_REPNZ,<<REPNZ   >>
X M_SCASB,<<SCASB   >>
X M_SCASW,<<SCASW   >>
X M_SEG,<<SEG     >>
X M_STOSB,<<STOSB   >>
X M_STOSW,<<STOSW   >>
 
;; Instruction of one or two bytes

X M_DEC,<<DEC     >>
X M_IN,<<IN      >>
X M_INC,<<INC     >>
X M_INT,<<INT     >>
X M_INTO,<<INTO    >>
X M_IRET,<<IRET    >>
X M_OUT,<<OUT     >>
X M_POP,<<POP     >>
X M_PUSH,<<PUSH    >>
X M_RET,<<RET     >>
X M_XCHG,<<XCHG    >>

;; Two byte instructions

X M_AAD,<<AAD     >>
X M_AAM,<<AAM     >>
X M_JCXZ,<<JCXZ    >>
X M_JO,<<JO      >>
X M_JNO,<<JNO     >>
X M_JC,<<JC      >>
X M_JNC,<<JNC     >>
X M_JZ,<<JZ      >>
X M_JNZ,<<JNZ     >>
X M_JNA,<<JNA     >>
X M_JA,<<JA      >>
X M_JS,<<JS      >>
X M_JNS,<<JNS     >>
X M_JPE,<<JPE     >>
X M_JPO,<<JPO     >>
X M_JL,<<JL      >>
X M_JNL,<<JNL     >>
X M_JNG,<<JNG     >>
X M_JG,<<JG      >>

;; the next four tables represent a fair amount
;; deciphering
;; first the 'arithmetics'

X M_DIV,<<DIV     >>
X M_IDIV,<<IDIV    >>
X M_IMUL,<<IMUL    >>
X M_MUL,<<MUL     >>
X M_NEG,<<NEG     >>
X M_NOT,<<NOT     >>

;; now the loops

X M_LOOPNZ,<<LOOPNZ  >>
X M_LOOPZ,<<LOOPZ   >>
X M_LOOP,<<LOOP    >>

;; the 'rotates' group

X M_ROL,<<ROL     >>
X M_ROR,<<ROR     >>
X M_RCL,<<RCL     >>
X M_RCR,<<RCR     >>
X M_SHL,<<SHL     >>
X M_SHR,<<SHR     >>
X M_SAR,<<SAR     >>

;; the remainder require addressing mode deciphered

X M_ADC,<<ADC     >>
X M_ADD,<<ADD     >>
X M_AND,<<AND     >>
X M_CALL,<<CALL    >>
X M_CMP,<<CMP     >>
X M_ESC,<<ESC     >>
X M_JMP,<<JMP     >>
X M_LEA,<<LEA     >>
X M_LES,<<LES     >>
X M_LDS,<<LDS     >>
X M_MOV,<<MOV     >>
X M_OR,<<OR      >>
X M_SBB,<<SBB     >>
X M_SUB,<<SUB     >>
X M_TEST,<<TEST    >>
X M_XOR,<<XOR     >>

ENDM

	PAGE

; address table macros

OP_TABLES	MACRO
X M_ADD,DECODE_14
X M_ADD,DECODE_14
X M_ADD,DECODE_14
X M_ADD,DECODE_14
X M_ADD,DECODE_08
X M_ADD,DECODE_08
X M_PUSH,DECODE_03
X M_POP,DECODE_03
X M_OR,DECODE_14
X M_OR,DECODE_14
X M_OR,DECODE_14
X M_OR,DECODE_14
X M_OR,DECODE_08
X M_OR,DECODE_08
X M_PUSH,DECODE_03
X M_NON,DECODE_01
X M_ADC,DECODE_14
X M_ADC,DECODE_14
X M_ADC,DECODE_14
X M_ADC,DECODE_14
X M_ADC,DECODE_08
X M_ADC,DECODE_08
X M_PUSH,DECODE_03
X M_POP,DECODE_03
X M_SBB,DECODE_14
X M_SBB,DECODE_14
X M_SBB,DECODE_14
X M_SBB,DECODE_14
X M_SBB,DECODE_08
X M_SBB,DECODE_08
X M_PUSH,DECODE_03
X M_POP,DECODE_03
X M_AND,DECODE_14
X M_AND,DECODE_14
X M_AND,DECODE_14
X M_AND,DECODE_14
X M_AND,DECODE_08
X M_AND,DECODE_08
X M_SEG,DECODE_03
X M_DAA,DECODE_02
X M_SUB,DECODE_14
X M_SUB,DECODE_14
X M_SUB,DECODE_14
X M_SUB,DECODE_14
X M_SUB,DECODE_08
X M_SUB,DECODE_08
X M_SEG,DECODE_03
X M_DAS,DECODE_02
X M_XOR,DECODE_14
X M_XOR,DECODE_14
X M_XOR,DECODE_14
X M_XOR,DECODE_14
X M_XOR,DECODE_08
X M_XOR,DECODE_08
X M_SEG,DECODE_03
X M_AAA,DECODE_02
X M_CMP,DECODE_14
X M_CMP,DECODE_14
X M_CMP,DECODE_14
X M_CMP,DECODE_14
X M_CMP,DECODE_08
X M_CMP,DECODE_08
X M_SEG,DECODE_03
X M_AAS,DECODE_02
X M_INC,DECODE_04
X M_INC,DECODE_04
X M_INC,DECODE_04
X M_INC,DECODE_04
X M_INC,DECODE_04
X M_INC,DECODE_04
X M_INC,DECODE_04
X M_INC,DECODE_04
X M_DEC,DECODE_04
X M_DEC,DECODE_04
X M_DEC,DECODE_04
X M_DEC,DECODE_04
X M_DEC,DECODE_04
X M_DEC,DECODE_04
X M_DEC,DECODE_04
X M_DEC,DECODE_04
X M_PUSH,DECODE_04
X M_PUSH,DECODE_04
X M_PUSH,DECODE_04
X M_PUSH,DECODE_04
X M_PUSH,DECODE_04
X M_PUSH,DECODE_04
X M_PUSH,DECODE_04
X M_PUSH,DECODE_04
X M_POP,DECODE_04
X M_POP,DECODE_04
X M_POP,DECODE_04
X M_POP,DECODE_04
X M_POP,DECODE_04
X M_POP,DECODE_04
X M_POP,DECODE_04
X M_POP,DECODE_04
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_JO,DECODE_07
X M_JNO,DECODE_07
X M_JC,DECODE_07
X M_JNC,DECODE_07
X M_JZ,DECODE_07
X M_JNZ,DECODE_07
X M_JNA,DECODE_07
X M_JA,DECODE_07
X M_JS,DECODE_07
X M_JNS,DECODE_07
X M_JPE,DECODE_07
X M_JPO,DECODE_07
X M_JL,DECODE_07
X M_JNL,DECODE_07
X M_JNG,DECODE_07
X M_JG,DECODE_07
X M_NON,DECODE_17
X M_NON,DECODE_17
X M_NON,DECODE_18
X M_NON,DECODE_18
X M_TEST,DECODE_14
X M_TEST,DECODE_14
X M_XCHG,DECODE_14
X M_XCHG,DECODE_14
X M_MOV,DECODE_14
X M_MOV,DECODE_14
X M_MOV,DECODE_14
X M_MOV,DECODE_14
X M_MOV,DECODE_16
X M_LEA,DECODE_31
X M_MOV,DECODE_16
X M_POP,DECODE_15
X M_NOP,DECODE_02
X M_XCHG,DECODE_05 
X M_XCHG,DECODE_05 
X M_XCHG,DECODE_05 
X M_XCHG,DECODE_05 
X M_XCHG,DECODE_05 
X M_XCHG,DECODE_05 
X M_XCHG,DECODE_05 
X M_CBW,DECODE_02
X M_CWD,DECODE_02
X M_CALL,DECODE_30
X M_WAIT,DECODE_02
X M_PUSHF,DECODE_02
X M_POPF,DECODE_02
X M_SAHF,DECODE_02
X M_LAHF,DECODE_02
X M_MOV,DECODE_10
X M_MOV,DECODE_10
X M_MOV,DECODE_11
X M_MOV,DECODE_11
X M_MOVSB,DECODE_02
X M_MOVSW,DECODE_02
X M_CMPSB,DECODE_02
X M_CMPSW,DECODE_02
X M_TEST,DECODE_08
X M_TEST,DECODE_08
X M_STOSB,DECODE_02
X M_STOSW,DECODE_02
X M_LODSB,DECODE_02
X M_LODSW,DECODE_02
X M_SCASB,DECODE_02
X M_SCASW,DECODE_02
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_MOV,DECODE_09
X M_NON,DECODE_02
X M_NON,DECODE_02
X M_RET,DECODE_26
X M_RET,DECODE_02
X M_LES,DECODE_31
X M_LDS,DECODE_31
X M_MOV,DECODE_20
X M_MOV,DECODE_20
X M_NON,DECODE_01
X M_NON,DECODE_01
X M_RET,DECODE_26
X M_RET,DECODE_02
X M_INT,DECODE_27
X M_INT,DECODE_28
X M_INTO,DECODE_02
X M_IRET,DECODE_02
X M_NON,DECODE_19
X M_NON,DECODE_19
X M_NON,DECODE_19
X M_NON,DECODE_19
X M_AAM,DECODE_06
X M_AAD,DECODE_06
X M_NON,DECODE_02
X M_XLAT,DECODE_02
X M_ESC,DECODE_15
X M_ESC,DECODE_15
X M_ESC,DECODE_15
X M_ESC,DECODE_15
X M_ESC,DECODE_15
X M_ESC,DECODE_15
X M_ESC,DECODE_15
X M_ESC,DECODE_15
X M_LOOPNZ,DECODE_07
X M_LOOPZ,DECODE_07
X M_LOOP,DECODE_07
X M_JCXZ,DECODE_07
X M_IN,DECODE_12
X M_IN,DECODE_12
X M_OUT,DECODE_13
X M_OUT,DECODE_13
X M_CALL,DECODE_29
X M_JMP,DECODE_29
X M_JMP,DECODE_30
X M_JMP,DECODE_07
X M_IN,DECODE_24
X M_IN,DECODE_24
X M_OUT,DECODE_25
X M_OUT,DECODE_25
X M_LOCK,DECODE_02
X M_NON,DECODE_01
X M_REPNZ,DECODE_02
X M_REP,DECODE_02
X M_HLT,DECODE_02
X M_CMC,DECODE_02
X M_NON,DECODE_21
X M_NON,DECODE_21
X M_CLC,DECODE_02
X M_STC,DECODE_02
X M_CLI,DECODE_02
X M_STI,DECODE_02
X M_CLD,DECODE_02
X M_STD,DECODE_02
X M_NON,DECODE_22
X M_NON,DECODE_23
ENDM

	PAGE

DATASEG		SEGMENT	PUBLIC

; Single register table

SINGLE_REGISTERS		EQU	$
R_TABLE <<AL,CL,DL,BL,AH,CH,DH,BH>>

; Double register table

REGISTER_PAIRS			EQU	$
R_TABLE <<AX,CX,DX,BX,SP,BP,SI,DI>>
 
; Segment register names

SEG_REGISTERS			EQU	$
R_TABLE <<ES,CS,SS,DS>>

; non event marker

M_NON	DB	'??==    '
 
;Here is the start of the main lookup table area
; for interpreting the instructions

; Define X as the mnemonics address table
X MACRO	MNEMONICS,ROUTINES,FLAGS
	DW	MNEMONICS
ENDM

MNEMONICS_TABLE 	EQU	$
; Create the mnemonics address table here
OP_TABLES

; define X to give the routine addresses
X MACRO	MNEMONICS,ROUTINES,FLAGS
	DW	 OFFSET ROUTINES
ENDM
 
ROUTINE_TABLE		EQU	$
; Create the routine address table here
OP_TABLES

; define X to give mnemonics table
X MACRO	ADDRESS,STRING
ADDRESS	EQU	$			;; address of start
IRPC	C,STRING
DB	'&C'
ENDM
ENDM

; create mnemonics table here
M_TABLE

	SUBTTL

	PAGE

	SUBTTL Miscellaneous data tables

; here is a special area for tables of opcodes which
; do not conform to the normal decoding relationship
; of 1 opcode --> 1 mnemonic

OPCODES_8081	EQU	$
	DW	M_ADD
	DW	M_OR
	DW	M_ADC
	DW	M_SBB
	DW	M_AND
	DW	M_SUB
	DW	M_XOR
	DW	M_CMP

OPCODES_8283	EQU	$
	DW	M_ADD
	DW	M_NON
	DW	M_ADC
	DW	M_SBB
	DW	M_NON
	DW	M_SUB
	DW	M_NON
	DW	M_CMP

OPCODES_C6C7	EQU	$
	DW	M_MOV
	DW	M_NON
	DW	M_NON
	DW	M_NON
	DW	M_NON
	DW	M_NON
	DW	M_NON
	DW	M_NON

OPCODES_D0D3	EQU	$
	DW	M_ROL
	DW	M_ROR
	DW	M_RCL
	DW	M_RCR
	DW	M_SHL
	DW	M_SHR
	DW	M_NON
	DW	M_SAR

OPCODES_F6F7	EQU	$
	DW	M_TEST
	DW	M_NON
	DW	M_NOT
	DW	M_NEG
	DW	M_MUL
	DW	M_IMUL
	DW	M_DIV
	DW	M_IDIV

OPCODES_FE	EQU	$
	DW	M_INC
	DW	M_DEC
	DW	M_NON
	DW	M_NON
	DW	M_NON
	DW	M_NON
	DW	M_NON
	DW	M_NON

OPCODES_FF	EQU	$
	DW	M_INC
	DW	M_DEC
	DW	M_CALL
	DW	M_CALL
	DW	M_JMP
	DW	M_JMP
	DW	M_PUSH
	DW	M_NON

	PAGE

; define the tables here for decoding rm/mod and reg fields

MOD_TABLE	EQU	$

	DW	MOD00_TABLE			;pointer to rm fields
	DW	MOD01_TABLE
	DW	MOD10_TABLE
	DW	MOD11_TABLE

MOD00_TABLE	EQU	$

	DW	RM000$MOD00			;routine pointers
	DW	RM001$MOD00
	DW	RM010$MOD00
	DW	RM011$MOD00
	DW	RM100$MOD00
	DW	RM101$MOD00
	DW	RM110$MOD00
	DW	RM111$MOD00

MOD01_TABLE	EQU	$

	DW	RM000$MOD01			;routine pointers
	DW	RM001$MOD01
	DW	RM010$MOD01
	DW	RM011$MOD01
	DW	RM100$MOD01
	DW	RM101$MOD01
	DW	RM110$MOD01
	DW	RM111$MOD01

MOD10_TABLE	EQU	$

	DW	RM000$MOD10			;routine pointers
	DW	RM001$MOD10
	DW	RM010$MOD10
	DW	RM011$MOD10
	DW	RM100$MOD10
	DW	RM101$MOD10
	DW	RM110$MOD10
	DW	RM111$MOD10

MOD11_TABLE	EQU	$

	DW	RM$MOD11
	DW	RM$MOD11
	DW	RM$MOD11
	DW	RM$MOD11
	DW	RM$MOD11
	DW	RM$MOD11
	DW	RM$MOD11
	DW	RM$MOD11

DATASEG		ENDS

	END

